services:
  rest-api:
    build:
      context: .
      dockerfile: cmd/http/Dockerfile
    container_name: orders_rest
    ports:
      - "8080:8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: orders
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - orders_network

  graphql-api:
    build:
      context: .
      dockerfile: cmd/graphql/Dockerfile
    container_name: orders_graphql
    ports:
      - "8081:8081"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: orders
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - orders_network

  grpc-server:
    build:
      context: .
      dockerfile: cmd/grpc/Dockerfile
    container_name: orders_grpc
    ports:
      - "50051:50051"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: orders
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - orders_network

  postgres:
    image: postgres:latest
    container_name: orders_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - orders_network

networks:
  orders_network:
    driver: bridge

volumes:
  postgres_data: